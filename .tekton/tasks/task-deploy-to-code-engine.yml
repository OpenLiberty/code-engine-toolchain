apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy-to-code-engine
spec:
  params:
    - name: ibmcloud-api
      description: the ibmcloud api
      default: https://cloud.ibm.com
    - name: continuous-delivery-context-secret
      description: name of the configmap containing the continuous delivery pipeline context secrets
      default: secure-properties
    - name: ibmcloud-apikey-secret-key
      description: field in the secret that contains the api key used to login to ibmcloud
      default: apikey
    - name: app-name
      description: name of the Code Engine application
    - name: resource-group
      description: target resource group (name or id) for the ibmcloud login operation
    - name: region
      description: target region for the ibmcloud login operation (if none is found it will default to the toolchain region)
    - name: code-engine-project
      description: name of the Code Engine project for deploying application
    - name: service-bindings
      description: JSON object of a map of names to services instances to be bound to the application
      default: "{}"
    - name: cpu
      description: number of vCPU of the Code Engine application
      default: "0.125"
    - name: max-scale
      description: maximum scale of the Code Engine application
      default: "10"
    - name: min-scale
      description: minimum scale of the Code Engine application
      default: "1"
    - name: memory
      description: total memory of the Code Engine application
      default: "0.5G"
    - name: ephemeral-storage
      description: Ephemeral storage
      default: "0.4G"
    - name: port
      description: port where the application is listening
      default: "http1:8080"
    - name: image-repository
      description: the repository for the built image
    - name: image-tags
      description: the tags for the built image
    - name: shuttle-properties-file
      description: name of the properties file that contain properties to include in the environment
      default: "build.properties"
    - name: pipeline-debug
      description: Pipeline debug mode. Value can be 0 or 1. Default to 0
      default: "0"
    - name: task-image
      description: image used to execute this task
      default: "icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.2"
  results:
    - name: app-url
      description: The running application's URL (obtained from APP_URL variable set by the executed script)
  workspaces:
    - name: artifacts
      description: A workspace
      mountPath: /artifacts
  steps:
    - name: execute
      image: $(params.task-image)
      workingDir: /artifacts
      env:
        - name: BUILD_NUMBER
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/build-number']
        - name: PIPELINE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['devops.cloud.ibm.com/pipeline-id']
        - name: PIPELINE_BLUEMIX_API_KEY
          valueFrom:
            secretKeyRef:
              name: $(params.continuous-delivery-context-secret)
              key: $(params.ibmcloud-apikey-secret-key)
        - name: SHUTTLE_PROPERTIES_FILE
          value: $(params.shuttle-properties-file)
      script: |
        #!/bin/bash
        set -e -o pipefail

        if [ $(params.pipeline-debug) == 1 ]; then
            env
            pwd
            ls -l
            echo "=== cat /artifacts/_toolchain.json ==="
            cat /artifacts/_toolchain.json
            echo ""
            echo "======================================"
            trap env EXIT
            set -x
        fi

        # SETUP BEGIN
        ibmcloud config --check-version false
        IBM_CLOUD_REGION=$(jq -r '.region_id' /artifacts/_toolchain.json | awk -F: '{print $3}')

        ibmcloud login -a $(params.ibmcloud-api) -r $IBM_CLOUD_REGION --apikey $PIPELINE_BLUEMIX_API_KEY

        # Kin: Only need to target one resource group
        ibmcloud target -g "$(params.resource-group)"

        # View shuttle properties
        cat $(params.shuttle-properties-file)

        source $(params.shuttle-properties-file)
        export $(cut -d= -f1 $(params.shuttle-properties-file))

        ibmcloud plugin install code-engine

        # Kin: See if projects need to be created if missing (This means to)
        echo "Check if the Code Engine projects are availability on IBM Cloud"
        MYPROJECTS=($(echo "$(params.code-engine-project)" | tr ',' '\n'))
        MYREGIONS=($(echo "$(params.region)" | tr ',' '\n'))
        echo -e "Targeting Code Engine projects ${MYPROJECTS[@]} in regions ${MYREGIONS[@]}"

        RESULT=""
        for i in "${!MYPROJECTS[@]}"
        do
            echo "Target region ${MYREGIONS[i]}"
            ibmcloud target -r "${MYREGIONS[i]}"

            echo "Loading Kube config for project ${MYPROJECTS[i]}"
            ibmcloud ce proj select -n ${MYPROJECTS[i]} -k

            echo -e "Configuring access to private image registry"
            PIPELINE_TOOLCHAIN_ID=$(jq -j '.toolchain_guid' /artifacts/_toolchain.json)
            IMAGE_PULL_SECRET_NAME="ibmcloud-toolchain-${PIPELINE_TOOLCHAIN_ID}-${REGISTRY_URL}"

            if ! kubectl get secret ${IMAGE_PULL_SECRET_NAME}; then
                echo -e "${IMAGE_PULL_SECRET_NAME} not found, creating it"
                # for Container Registry, docker username is 'token' and email does not matter
                kubectl create secret docker-registry ${IMAGE_PULL_SECRET_NAME} --docker-server=${REGISTRY_URL} --docker-password=${PIPELINE_BLUEMIX_API_KEY} --docker-username=iamapikey --docker-email=a@b.com
            fi

            # Check if the application exists in the targeted CE project
            if ibmcloud ce app get -n $(params.app-name) | grep Age; then
                echo "Code Engine app with name $(params.app-name) found, updating it"
                ibmcloud ce app update -n $(params.app-name) \
                -i $(params.image-repository):$(params.image-tags) \
                --rs ${IMAGE_PULL_SECRET_NAME} \
                -w=false \
                --cpu $(params.cpu) \
                --max $(params.max-scale) \
                --min $(params.min-scale) \
                -m $(params.memory) \
                -p $(params.port) \
                --ephemeral-storage $(params.ephemeral-storage)
            else
                echo "Code Engine app with name $(params.app-name) not found, creating it"
                ibmcloud ce app create -n $(params.app-name) \
                -i $(params.image-repository):$(params.image-tags) \
                --rs ${IMAGE_PULL_SECRET_NAME} \
                -w=false \
                --cpu $(params.cpu) \
                --max $(params.max-scale) \
                --min $(params.min-scale) \
                -m $(params.memory) \
                -p $(params.port) \
                --ephemeral-storage $(params.ephemeral-storage)
            fi

            # Bind services, if any
            while read;
            do
                NAME=$(echo "$REPLY" | jq -j '.key')
                PREFIX=$(echo "$REPLY" | jq -j '.value')

                if ! ibmcloud ce app get -n $(params.app-name) | grep "$NAME"; then
                ibmcloud ce app bind -n $(params.app-name) --si "$NAME" -p "$PREFIX" -w=false
                fi
            done < <(jq -c 'to_entries | .[]' <<< $(echo $(params.service-bindings) | base64 -d))

            echo "Checking if application is ready..."
            KUBE_SERVICE_NAME=$(params.app-name)

            for ITERATION in {1..100}
            do
                sleep 3

                kubectl get ksvc/${KUBE_SERVICE_NAME} --output=custom-columns=DOMAIN:.status.conditions[*].status
                SVC_STATUS_READY=$( kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status?.conditions[]?.status?|select(. == "True")' )
                echo SVC_STATUS_READY=$SVC_STATUS_READY

                SVC_STATUS_NOT_READY=$( kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status?.conditions[]?.status?|select(. == "False")' )
                echo SVC_STATUS_NOT_READY=$SVC_STATUS_NOT_READY

                SVC_STATUS_UNKNOWN=$( kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status?.conditions[]?.status?|select(. == "Unknown")' )
                echo SVC_STATUS_UNKNOWN=$SVC_STATUS_UNKNOWN

                if [ \( -n "$SVC_STATUS_NOT_READY" \) -o \( -n "$SVC_STATUS_UNKNOWN" \) ]; then
                echo "Application not ready, retrying"
                elif [ -n "$SVC_STATUS_READY" ]; then
                echo "Application is ready"
                break
                else
                echo "Application status unknown, retrying"
                fi
            done

            echo "Application service details:"
            kubectl describe ksvc/${KUBE_SERVICE_NAME}
            if [ \( -n "$SVC_STATUS_NOT_READY" \) -o \( -n "$SVC_STATUS_UNKNOWN" \) ]; then
                echo "Application is not ready after waiting maximum time"
                exit 1
            fi

            # Determine app url for polling from knative service
            TEMP_URL=$( kubectl get ksvc/${KUBE_SERVICE_NAME} -o json | jq '.status.url' )
            echo "Application status URL: $TEMP_URL"
            TEMP_URL=${TEMP_URL%\"} # remove end quote
            TEMP_URL=${TEMP_URL#\"} # remove beginning quote
            APPLICATION_URL=$TEMP_URL
            if [ -z "$APPLICATION_URL" ]; then
                echo "Deploy failed, no URL found for application"
                exit 1
            fi
            echo "Application is available"
            echo "=========================================================="
            echo -e "View the application at: $APPLICATION_URL"

            # Record task results
            if [[ "$i" -eq 0 ]];
            then
                RESULT=$APPLICATION_URL
            else
                RESULT=$RESULT,$APPLICATION_URL
            fi
        done
        echo -n "$RESULT" > $(results.app-url.path)
        echo -n "Task result: $(results.app-url.path)"
      volumeMounts:
        - mountPath: /cd-config
          name: cd-config-volume
        - mountPath: /steps
          name: steps-volume
        - mountPath: /artifacts/_toolchain.json
          subPath: toolchain.json
          name: cd-config-volume
  volumes:
    - name: steps-volume
      emptyDir: {}
    - name: cd-config-volume
      configMap:
        name: toolchain
        items:
          - key: toolchain.json
            path: toolchain.json
